#import "./fragments/profile.graphql"
#import "./fragments/nft.graphql"

query WalletProfileQuery($address: PublicKey!) {
  wallet(address: $address) {
    address
    nftCounts {
      owned
      created
    }
    compactOwnedCount @client
    compactCreatedCount @client
    compactFollowerCount @client
    compactFollowingCount @client
    displayName @client
    shortAddress @client
    previewImage @client
    connectionCounts {
      fromCount
      toCount
    }
    profile {
      ...ProfileInfo
    }
  }
}

query WalletProfileClientQuery($address: PublicKey!) {
  wallet(address: $address) {
    address
    collectedCollections {
      collection {
        nft {
          image(width: 100)
          mintAddress
          address
          name
        }
        floorPrice
      }
      nftsOwned
      estimatedValue
    }
  }
}

query CreatedCollectionsQuery($address: PublicKey!) {
  wallet(address: $address) {
    address
    createdCollections {
      collection {
        nft {
          image
          mintAddress
          address
          name
        }
        floorPrice
        nftCount
      }
    }
  }
}

query FollowingProfileQuery($from: PublicKey!, $to: PublicKey!) {
  connections(from: [$from], to: [$to], limit: 1, offset: 0) {
    to {
      address
      profile {
        ...ProfileInfo
      }
    }
  }
}

query CollectedNFTsQuery(
  $address: PublicKey!
  $collections: [String!]
  $limit: Int!
  $offset: Int!
) {
  wallet(address: $address) {
    address
    nfts(collections: $collections, limit: $limit, offset: $offset) {
      ...NftInfo
    }
  }
}

query CreatedNFTsQuery($creator: PublicKey!, $limit: Int!, $offset: Int!, $listed: Boolean) {
  createdNfts: nfts(creators: [$creator], limit: $limit, offset: $offset, listed: $listed) {
    ...NftInfo
  }
}

query ProfileActivitiesQuery(
  $address: PublicKey!
  $eventTypes: [String!]
  $limit: Int = 25
  $offset: Int = 0
) {
  wallet(address: $address) {
    address
    activities(eventTypes: $eventTypes, limit: $limit, offset: $offset) {
      id
      metadata
      price
      createdAt
      timeSince @client
      marketplaceProgramAddress
      solPrice @client
      nftMarketplace @client {
        name
        logo
      }
      activityType
      auctionHouse {
        address
        treasuryMint
      }
      nft {
        address
        name
        mintAddress
        image(width: 100)
      }
    }
  }
}

query ProfileOffersQuery(
  $address: PublicKey!
  $offerType: OfferType
  $limit: Int = 25
  $offset: Int = 0
) {
  wallet(address: $address) {
    address
    offers(offerType: $offerType, limit: $limit, offset: $offset) {
      id
      metadata
      price
      createdAt
      timeSince @client
      marketplaceProgramAddress
      solPrice @client
      nftMarketplace @client {
        name
        logo
      }
      auctionHouse {
        address
        treasuryMint
      }
      nft {
        address
        name
        mintAddress
        image(width: 100)
      }
      buyerWallet {
        address
        twitterHandle
        previewImage @client
        displayName @client
        profile {
          ...ProfileInfo
        }
      }
    }
  }
}

query ProfileInfoByAddressQuery($address: PublicKey!) {
  wallet(address: $address) {
    address
    previewImage @client
    displayName @client
    profile {
      ...ProfileInfo
    }
  }
}
